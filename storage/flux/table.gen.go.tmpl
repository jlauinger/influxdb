package storageflux 

import (
	"sync"

	"github.com/apache/arrow/go/arrow/array"
	"github.com/influxdata/flux"
	"github.com/influxdata/flux/arrow"
	"github.com/influxdata/flux/execute"
	"github.com/influxdata/flux/memory"
	"github.com/influxdata/influxdb/v2"
	"github.com/influxdata/influxdb/v2/models"
	storage "github.com/influxdata/influxdb/v2/storage/reads"
	"github.com/influxdata/influxdb/v2/tsdb/cursors"
)
{{range .}}
//
// *********** {{.Name}} ***********
//

type {{.name}}Table struct {
	table
	mu     sync.Mutex
	cur    cursors.{{.Name}}ArrayCursor
	alloc  *memory.Allocator
}

func new{{.Name}}Table(
	done chan struct{},
	cur cursors.{{.Name}}ArrayCursor,
	bounds execute.Bounds,
	key flux.GroupKey,
	cols []flux.ColMeta,
	tags models.Tags,
	defs [][]byte,
	cache *tagsCache,
	alloc *memory.Allocator,
) *{{.name}}Table {
	t := &{{.name}}Table{
		table: newTable(done, bounds, key, cols, defs, cache, alloc),
		cur:   cur,
	}
	t.readTags(tags)
	t.advance()

	return t
}

func (t *{{.name}}Table) Close() {
	t.mu.Lock()
	if t.cur != nil {
		t.cur.Close()
		t.cur = nil
	}
	t.mu.Unlock()
}

func (t *{{.name}}Table) Statistics() cursors.CursorStats {
	t.mu.Lock()
	defer t.mu.Unlock()
	cur := t.cur
	if cur == nil {
		return cursors.CursorStats{}
	}
	cs := cur.Stats()
	return cursors.CursorStats{
		ScannedValues: cs.ScannedValues,
		ScannedBytes:  cs.ScannedBytes,
	}
}

func (t *{{.name}}Table) Do(f func(flux.ColReader) error) error {
	return t.do(f, t.advance)
}

func (t *{{.name}}Table) advance() bool {
	a := t.cur.Next()
	l := a.Len()
	if l == 0 {
		return false
	}

	// Retrieve the buffer for the data to avoid allocating
	// additional slices. If the buffer is still being used
	// because the references were retained, then we will
	// allocate a new buffer.
	cr := t.allocateBuffer(l)
	cr.cols[timeColIdx] = arrow.NewInt(a.Timestamps, t.alloc)
	cr.cols[valueColIdx] = t.toArrowBuffer(a.Values)
	t.appendTags(cr)
	t.appendBounds(cr)
	return true
}

// window table
type {{.name}}WindowTable struct {
	{{.name}}Table
	windowEvery int64
	arr         *cursors.{{.Name}}Array
	nextTS      int64
	idxInArr    int
	createEmpty bool
}

func new{{.Name}}WindowTable(
	done chan struct{},
	cur cursors.{{.Name}}ArrayCursor,
	bounds execute.Bounds,
	every int64,
	createEmpty bool,
	key flux.GroupKey,
	cols []flux.ColMeta,
	tags models.Tags,
	defs [][]byte,
	cache *tagsCache,
	alloc *memory.Allocator,
) *{{.name}}WindowTable {
	t := &{{.name}}WindowTable{
		{{.name}}Table: {{.name}}Table{
			table: newTable(done, bounds, key, cols, defs, cache, alloc),
			cur:   cur,
		},
		windowEvery: every,
		createEmpty: createEmpty,
	}
	if t.createEmpty {
		start := int64(bounds.Start)
		t.nextTS = start + (every - start % every)
	}
	t.readTags(tags)
	t.advance()

	return t
}

// createNextWindow will read the timestamps from the array
// cursor and construct the values for the next window.
func (t *{{.name}}WindowTable) createNextWindow() (key flux.GroupKey, start, stop *array.Int64, ok bool) {
	var stopT int64
	if t.createEmpty {
		stopT = t.nextTS
		t.nextTS += t.windowEvery
	} else {
		if !t.nextBuffer() {
			return nil, nil, nil, false
		}
		stopT = t.arr.Timestamps[t.idxInArr]
	}

	// Regain the window start time from the window end time.
	startT := stopT - t.windowEvery
	if startT < int64(t.bounds.Start) {
		startT = int64(t.bounds.Start)
	}
	if stopT > int64(t.bounds.Stop) {
		stopT = int64(t.bounds.Stop)
	}

	// If the start time is after our stop boundary,
	// we exit here when create empty is true.
	if t.createEmpty && startT >= int64(t.bounds.Stop) {
		return nil, nil, nil, false
	}
	key = groupKeyForWindow(t.key, startT, stopT)
	start = arrow.NewInt([]int64{startT}, t.alloc)
	stop = arrow.NewInt([]int64{stopT}, t.alloc)
	return key, start, stop, true
}

// nextAt will retrieve the next value that can be used with
// the given timestamp. If no values can be used with the timestamp,
// it will return the default value and false.
func (t *{{.name}}WindowTable) nextAt(ts int64) (v {{.Type}}, ok bool) {
	if !t.nextBuffer() || ts > t.arr.Timestamps[t.idxInArr] {
		return
	}
	v, ok = t.arr.Values[t.idxInArr], true
	t.idxInArr++
	return v, ok
}

// nextBuffer will ensure the array cursor is filled
// and will return true if there is at least one value
// that can be read from it.
func (t *{{.name}}WindowTable) nextBuffer() bool {
	// Discard the current array cursor if we have
	// exceeded it.
	if t.arr != nil && t.idxInArr >= t.arr.Len() {
		t.arr = nil
	}

	// Retrieve the next array cursor if needed.
	if t.arr == nil {
		arr := t.cur.Next()
		if arr.Len() == 0 {
			return false
		}
		t.arr, t.idxInArr = arr, 0
	}
	return true
}

// appendValues will scan the timestamps and append values
// that match those timestamps from the buffer.
func (t *{{.name}}WindowTable) appendValues(intervals []int64, appendValue func(v {{.Type}}), appendNull func()) {
	for i := 0; i < len(intervals); i++ {
		if v, ok := t.nextAt(intervals[i]); ok {
			appendValue(v)
			continue
		}
		appendNull()
	}
}

func (t *{{.name}}WindowTable) advance() bool {
	// Create the timestamps for the next window.
	key, start, stop, ok := t.createNextWindow()
	if !ok {
		return false
	}
	values := t.mergeValues(stop.Int64Values())

	// Retrieve the buffer for the data to avoid allocating
	// additional slices. If the buffer is still being used
	// because the references were retained, then we will
	// allocate a new buffer.
	cr := t.allocateBuffer(stop.Len())
	cr.key = key
	cr.cols[startColIdx] = start
	cr.cols[stopColIdx] = stop
	cr.cols[windowedValueColIdx] = values
	t.appendTags(cr)
	return true
}

type {{.name}}CompleteWindowTable struct {
	{{.name}}Table
	windowEvery int64
	ts          int64

	// Buffered state from the underlying cursor.
	timestamps  []int64
	values      []{{.Type}}
	i           int
	done        bool
}

func new{{.Name}}CompleteWindowTable(
		done chan struct{},
		cur cursors.{{.Name}}ArrayCursor,
		bounds execute.Bounds,
		every int64,
		key flux.GroupKey,
		cols []flux.ColMeta,
		tags models.Tags,
		defs [][]byte,
		cache *tagsCache,
		alloc *memory.Allocator,
) *{{.name}}CompleteWindowTable {
	start := int64(bounds.Start)
	t := &{{.name}}CompleteWindowTable{
		{{.name}}Table: {{.name}}Table{
			table: newTable(done, bounds, key, cols, defs, cache, alloc),
			cur:   cur,
		},
		windowEvery: every,
		ts: start + (every - start % every),
	}
	t.readTags(tags)
	t.advance()

	return t
}

// createWindows will create the next set of windows for each interval.
// The ts parameter is the first interval's stop time.
func (t *{{.name}}CompleteWindowTable) createWindows(ts int64) (next int64, start, stop *array.Int64) {
	n := int((int64(t.bounds.Stop) - ts) / t.windowEvery)
	if n > maxWindowBufferSize {
		n = maxWindowBufferSize
	}

	stopB := arrow.NewIntBuilder(t.alloc)
	stopB.Resize(n)
	for i, ts := 0, ts; i < n; i, ts = i+1, ts+t.windowEvery {
		if i == n - 1 && ts > int64(t.bounds.Stop) {
			stopB.Append(int64(t.bounds.Stop))
			continue
		}
		stopB.Append(ts)
		next = ts
	}
	stop = stopB.NewInt64Array()

	startB := arrow.NewIntBuilder(t.alloc)
	startB.Resize(n)
	for i, ts := 0, ts - t.windowEvery; i < n; i, ts = i+1, ts+t.windowEvery {
		if i == 0 && ts < int64(t.bounds.Start) {
			startB.Append(int64(t.bounds.Start))
			continue
		}
		startB.Append(ts)
	}
	start = startB.NewInt64Array()
	return next, start, stop
}

func (t *{{.name}}CompleteWindowTable) nextAt(ts int64) (v {{.Type}}, ok bool) {
	if t.i >= len(t.timestamps) && !t.nextBuffer() {
		return
	} else if t.timestamps[t.i] != ts {
		return
	}
	v, ok = t.values[t.i], true
	t.i++
	return v, ok
}

func (t *{{.name}}CompleteWindowTable) nextBuffer() bool {
	if t.done {
		return false
	}

	a := t.cur.Next()
	if a.Len() == 0 {
		t.done = true
		return false
	}
	t.timestamps = a.Timestamps
	t.values = a.Values
	t.i = 0
	return true
}

func (t *{{.name}}CompleteWindowTable) appendValues(intervals []int64, appendValue func(v {{.Type}}), appendNull func()) {
	for i := 0; i < len(intervals); i++ {
		if v, ok := t.nextAt(intervals[i]); ok {
			appendValue(v)
			continue
		}
		appendNull()
	}
}

func (t *{{.name}}CompleteWindowTable) advance() bool {
	{{/*if t.ts - t.windowEvery >= int64(t.bounds.Stop) {*/}}
	{{/*	return false*/}}
	{{/*}*/}}

	{{/*var start, stop *array.Int64*/}}
	{{/*t.ts, start, stop = t.createWindows(t.ts)*/}}

	{{/*for {*/}}
	{{/*	if len(t.timestamps) == 0 && !t.done {*/}}
	{{/*		a := t.cur.Next()*/}}
	{{/*		if a.Len() == 0 {*/}}
	{{/*			t.done = true*/}}
	{{/*			break*/}}
	{{/*		}*/}}
	{{/*	}*/}}
	{{/*}*/}}
	{{/*values := t.mergeValues(stop.Int64Values())*/}}

	{{/*// Retrieve the buffer for the data to avoid allocating*/}}
	{{/*// additional slices. If the buffer is still being used*/}}
	{{/*// because the references were retained, then we will*/}}
	{{/*// allocate a new buffer.*/}}
	{{/*cr := t.allocateBuffer(stop.Len())*/}}
	{{/*cr.cols[startColIdx] = start*/}}
	{{/*cr.cols[stopColIdx] = stop*/}}
	{{/*cr.cols[windowedValueColIdx] = values*/}}
	{{/*t.appendTags(cr)*/}}
	{{/*return true*/}}
	return false
}

// group table

type {{.name}}GroupTable struct {
	table
	mu     sync.Mutex
	gc     storage.GroupCursor
	cur    cursors.{{.Name}}ArrayCursor
}

func new{{.Name}}GroupTable(
	done chan struct{},
	gc storage.GroupCursor,
	cur cursors.{{.Name}}ArrayCursor,
	bounds execute.Bounds,
	key flux.GroupKey,
	cols []flux.ColMeta,
	tags models.Tags,
	defs [][]byte,
	cache *tagsCache,
	alloc *memory.Allocator,
) *{{.name}}GroupTable {
	t := &{{.name}}GroupTable{
		table: newTable(done, bounds, key, cols, defs, cache, alloc),
		gc:    gc,
		cur:   cur,
	}
	t.readTags(tags)
	t.advance()

	return t
}

func (t *{{.name}}GroupTable) Close() {
	t.mu.Lock()
	if t.cur != nil {
		t.cur.Close()
		t.cur = nil
	}
	if t.gc != nil {
		t.gc.Close()
		t.gc = nil
	}
	t.mu.Unlock()
}

func (t *{{.name}}GroupTable) Do(f func(flux.ColReader) error) error {
	return t.do(f, t.advance)
}

func (t *{{.name}}GroupTable) advance() bool {
RETRY:
	a := t.cur.Next()
	l := a.Len()
	if l == 0 {
		if t.advanceCursor() {
			goto RETRY
		}

		return false
	}

	// Retrieve the buffer for the data to avoid allocating
	// additional slices. If the buffer is still being used
	// because the references were retained, then we will
	// allocate a new buffer.
	cr := t.allocateBuffer(l)
	cr.cols[timeColIdx] = arrow.NewInt(a.Timestamps, t.alloc)
	cr.cols[valueColIdx] = t.toArrowBuffer(a.Values)
	t.appendTags(cr)
	t.appendBounds(cr)
	return true
}

func (t *{{.name}}GroupTable) advanceCursor() bool {
	t.cur.Close()
	t.cur = nil
	for t.gc.Next() {
		cur := t.gc.Cursor()
		if cur == nil {
			continue
		}

		if typedCur, ok := cur.(cursors.{{.Name}}ArrayCursor); !ok {
			// TODO(sgc): error or skip?
			cur.Close()
			t.err = &influxdb.Error {
				Code: influxdb.EInvalid,
				Err: &GroupCursorError {
					typ: "{{.name}}",
					cursor: cur,
				},
			}
			return false
		} else {
			t.readTags(t.gc.Tags())
			t.cur = typedCur
			return true
		}
	}
	return false
}

func (t *{{.name}}GroupTable) Statistics() cursors.CursorStats {
	if t.cur == nil {
		return cursors.CursorStats{}
	}
	cs := t.cur.Stats()
	return cursors.CursorStats{
		ScannedValues: cs.ScannedValues,
		ScannedBytes:  cs.ScannedBytes,
	}
}

{{end}}
